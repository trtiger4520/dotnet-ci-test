# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    tags:
      - "beta_v*.*.*" # Trigger on version tags

  workflow_dispatch: # Allow manual trigger
    inputs:
      apps:
        description: "Select the app to build"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - dotnet-ci-test
          - dotnet-ci-tests

jobs:
  build:
    runs-on: "self-hosted"

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
      - id: publish
        name: Publish
        run: |
          if [ "${{ github.event.inputs.apps }}" == "all" ]; then
            app_names=("dotnet-ci" "dotnet-ci-tests")
          elif [ "${{ github.event.inputs.apps }}" != "" ]; then
            app_names=("${{github.event.inputs.apps}}")
          else
            app_names=("dotnet-ci")
          fi

          for app_name in "${app_names[@]}"; do
            echo "Publishing $app_name"
            dotnet publish -c Release -o "./publish/$app_name" "./$app_name"
          done

          echo "app_names=$app_names" >> $GITHUB_OUTPUT
      - name: Zip files
        run: |
          filename="$(TZ=Asia/Taipei date +%Y-%m-%d)"
          app_names=${{ steps.publish.outputs.app_names }}
          echo "Zipping files for apps: $app_names"
          for app_name in "${app_names[@]}"; do
            echo "Zipping $app_name"
            cd "./publish/$app_name" || exit 1
            zip -r "../${app_name}_${filename}.zip" .
            echo "Created zip file: ${app_name}_${filename}.zip"
            cd ../..
          done
      - name: Copy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          filename="$(TZ=Asia/Taipei date +%Y-%m-%d)"
          app_names=${{ steps.publish.outputs.app_names }}
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          scp -P $SSH_PORT -i private_key -o StrictHostKeyChecking=no ./publish/*.zip "$SSH_USER@$SSH_HOST:/inetpub/updates/"
          for app_name in "${app_names[@]}"; do
            zip_file="${app_name}_${filename}.zip"
            ssh -p $SSH_PORT -i private_key -o StrictHostKeyChecking=no \
              "$SSH_USER@$SSH_HOST" \
              "Remove-Item -Path '/inetpub/wwwroot/${app_name}' -Recurse -Force -ErrorAction SilentlyContinue; \
              Expand-Archive -Path '/inetpub/updates/${zip_file}' -DestinationPath '/inetpub/wwwroot/${app_name}' -Force; \
              Remove-Item '/inetpub/updates/${zip_file}'"
          done
